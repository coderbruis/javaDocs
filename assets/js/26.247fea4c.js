(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{423:function(v,_,t){"use strict";t.r(_);var n=t(2),s=Object(n.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),t("p",[v._v("在学习框架源码底层时，有非常多的二进制运算，由于大学学习计算机基础时开小差，没有学习牢固，所以在看底层源码的算法逻辑时遇到二进制运算比较吃力，遂通过一篇博文来总结下二进制运算，记录一下。")]),v._v(" "),t("p",[v._v("读者认真阅读完整片文章，看完如果还不懂可以来砍我~")]),v._v(" "),t("h2",{attrs:{id:"正文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正文"}},[v._v("#")]),v._v(" 正文")]),v._v(" "),t("h3",{attrs:{id:"_1-二进制基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-二进制基础"}},[v._v("#")]),v._v(" 1. 二进制基础")]),v._v(" "),t("p",[v._v("因为计算机底层是通过二进制来进行计算的，所以在计算机底层会将十进制转换为二进制。十进制就是逢10进1，二进制就是逢2进1。")]),v._v(" "),t("p",[v._v("就十进制来说，比如一百可以分为三位，个位、十位、百位, 用位数在下列表示 101这个十进制数。")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("百位")]),v._v(" "),t("th",[v._v("十位")]),v._v(" "),t("th",[v._v("十位")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("1")]),v._v(" "),t("td",[v._v("0")]),v._v(" "),t("td",[v._v("1")])])])]),v._v(" "),t("p",[v._v("因此对于十进制来说，越往上进制位越大，比如千位、万位。")]),v._v(" "),t("p",[v._v("同理，对于二进制来说也有对应位数, 如果表示二进制的4。")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("4(2^2)")]),v._v(" "),t("th",[v._v("2(2^1)")]),v._v(" "),t("th",[v._v("1(2^0)")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("1")]),v._v(" "),t("td",[v._v("0")]),v._v(" "),t("td",[v._v("0")])])])]),v._v(" "),t("p",[v._v("1 * 4 + 2 * 0 + 1 * 0 = 4")]),v._v(" "),t("p",[v._v("如果要表示二进制的5，则如下图")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("4(2^2)")]),v._v(" "),t("th",[v._v("2(2^1)")]),v._v(" "),t("th",[v._v("1(2^0)")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("1")]),v._v(" "),t("td",[v._v("0")]),v._v(" "),t("td",[v._v("1")])])])]),v._v(" "),t("p",[v._v("4 * 1 + 2 * 0 + 1 * 1 = 5")]),v._v(" "),t("p",[v._v("如果要表示二进制的11，则如下图")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("8(2^3)")]),v._v(" "),t("th",[v._v("4(2^2)")]),v._v(" "),t("th",[v._v("2(2^1)")]),v._v(" "),t("th",[v._v("1(2^0)")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("1")]),v._v(" "),t("td",[v._v("0")]),v._v(" "),t("td",[v._v("1")]),v._v(" "),t("td",[v._v("1")])])])]),v._v(" "),t("p",[v._v("8 * 1 + 4 * 0 + 2 * 1 + 1 * 1 = 11")]),v._v(" "),t("p",[v._v("在计算机中，1字节有8位二进制位。")]),v._v(" "),t("h3",{attrs:{id:"_2-二进制运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-二进制运算"}},[v._v("#")]),v._v(" 2. 二进制运算")]),v._v(" "),t("p",[v._v("在计算机系统中，二进制运算包括了二进制"),t("strong",[v._v("逻辑运算")]),v._v("和二进制"),t("strong",[v._v("算术运算")]),v._v("，而逻辑运算和算术运算的主要区别在于，逻辑运算是按位进行，不像算术运算中位与位之间有进位和借位的联系。下面介绍的与、或、异运算就属于二进制的逻辑运算。")]),v._v(" "),t("h4",{attrs:{id:"_2-1-二进制逻辑运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-二进制逻辑运算"}},[v._v("#")]),v._v(" 2.1 二进制逻辑运算")]),v._v(" "),t("p",[v._v("对于二进制的逻辑运算，记住一个口诀：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("与（&）运算")]),v._v(" "),t("p",[v._v("运算规则：\n"),t("code",[v._v("0&0=0, 0&1=0, 1&0=0, 1&1=1")])]),v._v(" "),t("p",[v._v("二者为1则为1，否则都为0。")])]),v._v(" "),t("li",[t("p",[v._v("或（|）运算")]),v._v(" "),t("p",[v._v("运算规则：\n"),t("code",[v._v("0|0=0，0|1=1，1|0=1，1|1=1")])]),v._v(" "),t("p",[v._v("遇1则1，否则为0。")])]),v._v(" "),t("li",[t("p",[v._v("异（^）或运算")]),v._v(" "),t("p",[v._v("运算规则：\n"),t("code",[v._v("0^0=0, 1^0=1, 0^1=1, 1^1=0")])]),v._v(" "),t("p",[v._v("同为0，异为1。")])]),v._v(" "),t("li",[t("p",[v._v("非（~）运算")]),v._v(" "),t("p",[v._v("运算规则：非运算即取反运算，在二进制中1变0,0变1")])])]),v._v(" "),t("p",[v._v("由于算术运算中会设计符号数的运算，所以先介绍二进制中的源码、补码以及反码。")]),v._v(" "),t("h4",{attrs:{id:"_2-2-二进制算术运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-二进制算术运算"}},[v._v("#")]),v._v(" 2.2 二进制算术运算")]),v._v(" "),t("p",[v._v("在二进制算术运算中，包括加、减、乘、除。")]),v._v(" "),t("blockquote",[t("p",[v._v("加法")])]),v._v(" "),t("p",[v._v("0 + 0 = 1\n1 + 1 = 10\n1 + 0 = 1\n0 + 1 = 1")]),v._v(" "),t("blockquote",[t("p",[v._v("乘法")])]),v._v(" "),t("p",[v._v("0 × 0 = 0\n1 × 0 = 0\n0 × 1 = 0\n1 × 1 = 1")]),v._v(" "),t("blockquote",[t("p",[v._v("减法")])]),v._v(" "),t("p",[v._v("0－0=0\n1－0=1\n1－1=0\n0－1=1")]),v._v(" "),t("blockquote",[t("p",[v._v("除法")])]),v._v(" "),t("p",[v._v("0÷1=0\n1÷1=1")]),v._v(" "),t("h3",{attrs:{id:"_3-二进制的源码、补码以及反码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-二进制的源码、补码以及反码"}},[v._v("#")]),v._v(" 3. 二进制的源码、补码以及反码")]),v._v(" "),t("blockquote",[t("p",[v._v("二进制源码是什么？")])]),v._v(" "),t("p",[v._v("由于数字有正负之分，所以在计算机中通过在一个数的二进制的最高位存放符号（0为正，1为负），而其他数值位存放着就是数值的二进制位, 这就是二进制源码。"),t("strong",[v._v("需要知道的是，正数的源码、补码和反码都是一样的。")])]),v._v(" "),t("p",[v._v("源码有缺点，就是不能直接进行运算，因为运算会出错。源码是有符号数的最简单的编码方式，便于输入输出，但作为代码加减运算时较为复杂。")]),v._v(" "),t("blockquote",[t("p",[v._v("二进制反码是什么？")])]),v._v(" "),t("p",[v._v('反码通常是用来由源码求补码或者由补码求源码的过度码，根据定义可以根据补码的整数和小数中"0"的表示形式各有2中，+0和-0不一样。以8位机器数为例，\n整数的"+0"源码为：0,0000000，反码为：0,0000000。整数的"-0"源码为：1,0000000，反码为：1,1111111。')]),v._v(" "),t("p",[v._v("反码跟源码是正数时一样，为负数是，除符号位外，其他为所有数值取反。")]),v._v(" "),t("p",[v._v("一句话概括就是，反码是用于计算负数补码的过度码。")]),v._v(" "),t("blockquote",[t("p",[v._v("二进制补码是什么？")])]),v._v(" "),t("p",[v._v("由于数字有正负之分，所以在计算机中通过在一个数的二进制的最高位存放符号（0为正，1为负），而这就是机器数的补码。还需要知道的一点是，在计算机中是负数是以补码的形式存储的，由于正数的源码和补码相同，所以正数以源码或者补码的形式存储在计算机中都是正确的说法，而负数的源码和补码则不相同。"),t("strong",[v._v("二进制运算后，会将补码结果转换为源码之后，再计算其十进制值。")])]),v._v(" "),t("p",[v._v("总结起来补码的作用就是：")]),v._v(" "),t("ol",[t("li",[v._v("使符号位能与有效值部分一起参加运算,从而简化运算规则.")]),v._v(" "),t("li",[v._v("使减法运算转换为加法运算,进一步简化计算机中运算器的线路设计 所有这些转换都是在计算机的最底层进行的，而在我们使用的汇编、C等其他高级语言中使用的都是原码。")])]),v._v(" "),t("blockquote",[t("p",[v._v("源码和反码之间怎么转换？")])]),v._v(" "),t("p",[v._v("源码除了最高位的符号位外，其他位数全部取反，得到的就是反码。")]),v._v(" "),t("blockquote",[t("p",[v._v("补码和反码之间怎么转换？")])]),v._v(" "),t("p",[v._v("补码则是在反码的基础上加一。")]),v._v(" "),t("blockquote",[t("p",[v._v("小结")])]),v._v(" "),t("p",[v._v("对于源码、补码和反码，三者均有符号位和数值位两部分，最高位为符号位，其余位均为数值位。符号位用0表示正，1表示负，而数值位三者表示方法都不同。在计算机系统中，数值一律用补码来\n表示和存储，原因在于补码可以将符号位和数值域统一处理，同时加法和减法也可以同一处理，此外源码和补码互相转换，其运算过程是相同的，不需要额外的硬件电路。\n一个负整数和其补数相加和为模，对一个整数的补码再求补码等于该整数自身，补码的正零与负零表示方法相同。")]),v._v(" "),t("h3",{attrs:{id:"_4-二进制的移位运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-二进制的移位运算符"}},[v._v("#")]),v._v(" 4. 二进制的移位运算符")]),v._v(" "),t("p",[v._v("在二进制中，移位运算符是一种位操作运算符。移位运算符可以在二进制的基础上对数字进行平移。按照平移的方向和位数填充规则可以将移位运算符分为三种：<<（左移）、>>（有符号右移）和>>>（无符号右移）。")]),v._v(" "),t("h4",{attrs:{id:"_4-1-（左移）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-（左移）"}},[v._v("#")]),v._v(" 4.1 <<（左移）")]),v._v(" "),t("p",[v._v("<<表示的是左移，将运算数的二进制整体左移指定的位数，低位用0补齐，因此左移不存在有符号和无符号的区别。")]),v._v(" "),t("p",[v._v("例如在java中int类型的十进制数16，"),t("strong",[v._v("由于在java中，int类型占4字节，1字节有8位，")]),v._v(" 所以其二进制源码表示为：")]),v._v(" "),t("p",[v._v("0000 0000 0000 0000 0000 0000 0001 0000")]),v._v(" "),t("p",[v._v("16 << 2 ，就是相当于将16的二进制数整体左移2为，然后低位补0，移位操作后：")]),v._v(" "),t("p",[v._v("0000 0000 0000 0000 0000 0000 0100 0000")]),v._v(" "),t("p",[v._v("那么我们再来看下对于负数的左移运算。")]),v._v(" "),t("p",[v._v("-16，其二进制源码为：\n1000 0000 0000 0000 0000 0000 0001 0000")]),v._v(" "),t("p",[v._v("反码：\n1111 1111 1111 1111 1111 1111 1110 1111")]),v._v(" "),t("p",[v._v("补码：\n1111 1111 1111 1111 1111 1111 1111 0000")]),v._v(" "),t("p",[v._v("-16 << 2 , 对补码进行向左移2位, 低位补0\n1111 1111 1111 1111 1111 1111 1100 0000\n由于移位后最高位仍然为1，表示负数，所以需要借助反码来运算")]),v._v(" "),t("p",[v._v("反码为补码 - 1，则结果为：\n1111 1111 1111 1111 1111 1111 1011 1111")]),v._v(" "),t("p",[v._v("源码为反码取反，则结果为：\n1000 0000 0000 0000 0000 0000 0100 0000\n-1 * (2 * 2 ^ 6) = -64")]),v._v(" "),t("p",[t("strong",[v._v("小结：对于左移运算，a << b，相当于 a * 2 ^ b。")])]),v._v(" "),t("h4",{attrs:{id:"_4-2-（有符号右移）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-（有符号右移）"}},[v._v("#")]),v._v(" 4.2 >> （有符号右移）")]),v._v(" "),t("p",[v._v("在计算机中>> 表示有符号右移，就是将二进制整体右移指定位数，如果是正数，则高位用0补齐，如果是负数，则高位用1补齐。")]),v._v(" "),t("p",[v._v("仍然用java中16和-16来进行有符号右移操作，")]),v._v(" "),t("p",[v._v("16 >> 2")]),v._v(" "),t("p",[v._v("通过二进制补码是运算，最终结果为4，同样的-16 >> 2 结果为-4，详细的通过二进制运算结果这里就不展示了，参考左移中列出的详细步骤。")]),v._v(" "),t("p",[t("strong",[v._v("小结：对于有符号右移来说，如果是正数，移动指定位数后，高位用0来补齐；如果是负数，高位用1补齐。")])]),v._v(" "),t("h4",{attrs:{id:"_4-3-（无符号右移）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-（无符号右移）"}},[v._v("#")]),v._v(" 4.3 >>>（无符号右移）")]),v._v(" "),t("p",[v._v("在计算机中通过>>>来表示无符号右移，不管是正数还是负数，高位都用0来补齐。")]),v._v(" "),t("p",[v._v("对于正数，无符号右移>>>和有符号右移>>结果都相同。")]),v._v(" "),t("p",[v._v("同样的用java中16和-16来进行无符号右移运算。")]),v._v(" "),t("p",[v._v("16 >>> 2 结果为 4。")]),v._v(" "),t("p",[v._v("而对于负数来说，无符号右移结果就需要进行计算了。")]),v._v(" "),t("p",[v._v("-16的补码为：\n1111 1111 1111 1111 1111 1111 1111 0000")]),v._v(" "),t("p",[v._v("则无符号右移，结果为：\n0011 1111 1111 1111 1111 1111 1111 1100")]),v._v(" "),t("p",[v._v("由于正数的源码、补码和反码都一样，所以移位后的源码为：\n0011 1111 1111 1111 1111 1111 1111 1100，计算二进制得。")]),v._v(" "),t("p",[v._v("1 * 2 ^ 29 + 1 * 2 ^ 28 + 1 * 2 ^ 27 + 1 * 2 ^ 26 + ... + 1 * 2 ^ 2 = 1073741820。")]),v._v(" "),t("blockquote",[t("p",[v._v("tip 可以通过小技巧来快速计算结果")])]),v._v(" "),t("p",[v._v("聪明的读者估计能发现，在二进制位数中，高位的十进制值为其余右边进制之和 + 1，读者可以自行去验证。\n所以，")]),v._v(" "),t("p",[v._v("0011 1111 1111 1111 1111 1111 1111 1100\n^\n取该位置计算得出的十进制值，然后-1，再减去 1 * 2^1 + 1 * 2 ^ 0，即：\n2 ^ 30 - 1 - 2 ^ 1 - 2 ^ 0 =1073741824 - 1 - 2 - 1 = 1073741820。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200706104749987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvZGVyQnJ1aXM=,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),v._v(" "),t("h3",{attrs:{id:"_5-示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-示例"}},[v._v("#")]),v._v(" 5. 示例")]),v._v(" "),t("p",[v._v("比如变量 a & (-a) 用二进制怎么运算：")]),v._v(" "),t("blockquote",[t("p",[v._v("10 & (-10)")])]),v._v(" "),t("p",[v._v("&是按位与，首先在计算机中数字都是以补码的形式存在的，比如：")]),v._v(" "),t("p",[v._v("int a = 10")]),v._v(" "),t("p",[v._v("+10，它的源码为：")]),v._v(" "),t("p",[v._v("0000 0000 0000 0000 0000 0000 0000 1010")]),v._v(" "),t("p",[v._v("由于正数的源码和补码相同，所以它的补码为：")]),v._v(" "),t("p",[v._v("0000 0000 0000 0000 0000 0000 0000 1010")]),v._v(" "),t("p",[v._v("对于-10，")]),v._v(" "),t("p",[v._v("它的源码为：")]),v._v(" "),t("p",[v._v("0000 0000 0000 0000 0000 0000 1000 1010")]),v._v(" "),t("p",[v._v("它的反码是源码的数值域取反，即：")]),v._v(" "),t("p",[v._v("1111 1111 1111 1111 1111 1111 1111 0101")]),v._v(" "),t("p",[v._v("它的补码是反码+1，即：")]),v._v(" "),t("p",[v._v("1111 1111 1111 1111 1111 1111 1111 0110")]),v._v(" "),t("p",[v._v("由于二进制运算都是用补码来计算的，所以 a & (-a) ，就是：")]),v._v(" "),t("p",[v._v("0000 0000 0000 0000 0000 0000 0000 1010 & 1111 1111 1111 1111 1111 1111 1111 0110 = 0000 0000 0000 0000 0000 0000 0000 0010")]),v._v(" "),t("p",[t("strong",[v._v("对于二进制来说，由于最高位为0，所以可以知道该数为正数，所以源码、补码和反码都一样。")]),v._v("\n而由于除开最高位符号位外的所有高位都为0，所以可以只看低四位，即0010，换算十进制后为2。")]),v._v(" "),t("p",[v._v("所以如果a=10，则 10 & (-10) = 2。")]),v._v(" "),t("p",[v._v("算完了&，那么再来计算下 ^ 和 | ，看下计算机中是如何通过补码来计算的。")]),v._v(" "),t("blockquote",[t("p",[v._v("10 ^ (-10)")])]),v._v(" "),t("p",[v._v("由于10的补码为：\n0000 0000 0000 0000 0000 0000 0000 1010\n-10的补码为：\n1111 1111 1111 1111 1111 1111 1111 0110")]),v._v(" "),t("p",[v._v("则10 ^ -10 的补码结果为：\n1111 1111 1111 1111 1111 1111 1111 1100")]),v._v(" "),t("p",[t("strong",[v._v("由于最高位为1，则该数为负数，需要借助反码来计算其源码。")])]),v._v(" "),t("p",[v._v("反码为补码 - 1，则结果为：\n1111 1111 1111 1111 1111 1111 1111 1011")]),v._v(" "),t("p",[v._v("源码为反码取反，结果为：\n1000 0000 0000 0000 0000 0000 0000 0100\n则十进制结果为-4。")]),v._v(" "),t("blockquote",[t("p",[v._v("10 | (-10)")])]),v._v(" "),t("p",[v._v("由于10的补码为：\n0000 0000 0000 0000 0000 0000 0000 1010\n-10的补码为：\n1111 1111 1111 1111 1111 1111 1111 0110")]),v._v(" "),t("p",[t("strong",[v._v("由于最高位为1，则该数为负数，需要借助反码来计算其源码。")])]),v._v(" "),t("p",[v._v("则10 | -10 的补码结果为：\n1111 1111 1111 1111 1111 1111 1111 1110\n反码结果为补码 - 1，则结果为：\n1111 1111 1111 1111 1111 1111 1111 1101\n源码为反码结果取反，结果为：\n1000 0000 0000 0000 0000 0000 0000 0010")]),v._v(" "),t("p",[v._v("计算的十进制结果为 -2。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200706092557131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvZGVyQnJ1aXM=,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),v._v(" "),t("p",[v._v("通过一个简单的示例分析，相信读者已经弄清楚了源码、补码和反码之间的关系以及在二进制运算中是如何运用的了。")]),v._v(" "),t("p",[t("strong",[v._v("在开源框架底层中算法会用到大量的二进制运算，")]),v._v(" 例如：在最近学习的Netty底层源码中，DefaultEventExecutorChooserFactory的底层源码有一个方法, 就是通过 a & (-a)来运算的。")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("@Override\npublic EventExecutorChooser newChooser(EventExecutor[] executors) {\n    if (isPowerOfTwo(executors.length)) {\n        return new PowerOfTowEventExecutorChooser(executors);\n    } else {\n        return new GenericEventExecutorChooser(executors);\n    }\n}\n/*\n * 用于计算val是否是2的幂，例如2、4、8、16\n */\nprivate static boolean isPowerOfTwo(int val) {\n   return (val & -val) == val;\n}\n\nprivate static final class PowerOfTowEventExecutorChooser implements EventExecutorChooser {\n    private final AtomicInteger idx = new AtomicInteger();\n    private final EventExecutor[] executors;\n\n    PowerOfTowEventExecutorChooser(EventExecutor[] executors) {\n        this.executors = executors;\n    }\n\n    /*\n     * 通过二进制与运算计算出下标索引值，原理如下：\n     * 假设：idx = 2 , 二进制表示为：0000 0010\n     * executors.length = 16, 则executors.length - 1 = 15, 二进制表示为：0000 1111\n     * \n     * 由于是与运算，且executors.length高四位为0000，则只需要注意低四位的运算。\n     * 则： 0010 & 1111 = 0010 ，十进制表示为2，\n     * \n     * 所以如果idx = 3, 则二进制为：0011 & 1111 = 0011 也为3，\n     * 等idx = 16时，二进制为：0001 0000 & 1111 = 0000 0000 ，即十进制的1，\n     * 这样就实现了在0 ~ 15 范围内循环获取下标索引的目的。\n     */\n    @Override\n    public EventExecutor next() {\n        return executors[idx.getAndIncrement() & executors.length - 1];\n    }\n}\n\nprivate static final class GenericEventExecutorChooser implements EventExecutorChooser {\n    private final AtomicInteger idx = new AtomicInteger();\n    private final EventExecutor[] executors;\n\n    GenericEventExecutorChooser(EventExecutor[] executors) {\n        this.executors = executors;\n    }\n\n    /*\n     * 通过取余运算，计算出下标索引\n     */\n    @Override\n    public EventExecutor next() {\n        return executors[Math.abs(idx.getAndIncrement() % executors.length)];\n    }\n}\n\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br"),t("span",{staticClass:"line-number"},[v._v("5")]),t("br"),t("span",{staticClass:"line-number"},[v._v("6")]),t("br"),t("span",{staticClass:"line-number"},[v._v("7")]),t("br"),t("span",{staticClass:"line-number"},[v._v("8")]),t("br"),t("span",{staticClass:"line-number"},[v._v("9")]),t("br"),t("span",{staticClass:"line-number"},[v._v("10")]),t("br"),t("span",{staticClass:"line-number"},[v._v("11")]),t("br"),t("span",{staticClass:"line-number"},[v._v("12")]),t("br"),t("span",{staticClass:"line-number"},[v._v("13")]),t("br"),t("span",{staticClass:"line-number"},[v._v("14")]),t("br"),t("span",{staticClass:"line-number"},[v._v("15")]),t("br"),t("span",{staticClass:"line-number"},[v._v("16")]),t("br"),t("span",{staticClass:"line-number"},[v._v("17")]),t("br"),t("span",{staticClass:"line-number"},[v._v("18")]),t("br"),t("span",{staticClass:"line-number"},[v._v("19")]),t("br"),t("span",{staticClass:"line-number"},[v._v("20")]),t("br"),t("span",{staticClass:"line-number"},[v._v("21")]),t("br"),t("span",{staticClass:"line-number"},[v._v("22")]),t("br"),t("span",{staticClass:"line-number"},[v._v("23")]),t("br"),t("span",{staticClass:"line-number"},[v._v("24")]),t("br"),t("span",{staticClass:"line-number"},[v._v("25")]),t("br"),t("span",{staticClass:"line-number"},[v._v("26")]),t("br"),t("span",{staticClass:"line-number"},[v._v("27")]),t("br"),t("span",{staticClass:"line-number"},[v._v("28")]),t("br"),t("span",{staticClass:"line-number"},[v._v("29")]),t("br"),t("span",{staticClass:"line-number"},[v._v("30")]),t("br"),t("span",{staticClass:"line-number"},[v._v("31")]),t("br"),t("span",{staticClass:"line-number"},[v._v("32")]),t("br"),t("span",{staticClass:"line-number"},[v._v("33")]),t("br"),t("span",{staticClass:"line-number"},[v._v("34")]),t("br"),t("span",{staticClass:"line-number"},[v._v("35")]),t("br"),t("span",{staticClass:"line-number"},[v._v("36")]),t("br"),t("span",{staticClass:"line-number"},[v._v("37")]),t("br"),t("span",{staticClass:"line-number"},[v._v("38")]),t("br"),t("span",{staticClass:"line-number"},[v._v("39")]),t("br"),t("span",{staticClass:"line-number"},[v._v("40")]),t("br"),t("span",{staticClass:"line-number"},[v._v("41")]),t("br"),t("span",{staticClass:"line-number"},[v._v("42")]),t("br"),t("span",{staticClass:"line-number"},[v._v("43")]),t("br"),t("span",{staticClass:"line-number"},[v._v("44")]),t("br"),t("span",{staticClass:"line-number"},[v._v("45")]),t("br"),t("span",{staticClass:"line-number"},[v._v("46")]),t("br"),t("span",{staticClass:"line-number"},[v._v("47")]),t("br"),t("span",{staticClass:"line-number"},[v._v("48")]),t("br"),t("span",{staticClass:"line-number"},[v._v("49")]),t("br"),t("span",{staticClass:"line-number"},[v._v("50")]),t("br"),t("span",{staticClass:"line-number"},[v._v("51")]),t("br"),t("span",{staticClass:"line-number"},[v._v("52")]),t("br"),t("span",{staticClass:"line-number"},[v._v("53")]),t("br"),t("span",{staticClass:"line-number"},[v._v("54")]),t("br"),t("span",{staticClass:"line-number"},[v._v("55")]),t("br"),t("span",{staticClass:"line-number"},[v._v("56")]),t("br"),t("span",{staticClass:"line-number"},[v._v("57")]),t("br"),t("span",{staticClass:"line-number"},[v._v("58")]),t("br")])]),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[v._v("在计算机中，二进制的运算是比较重要的，可以看到在Java的许多开源框架底层就运用到了大量的二进制与或非运算，所以学好二进制的基础概念是非常重要的。")]),v._v(" "),t("Boxx",{attrs:{type:"tip",content:"本站使用「CC BY 4.0」创作共享协议，转载请在文章明显位置注明作者及出处。"}})],1)}),[],!1,null,null,null);_.default=s.exports}}]);